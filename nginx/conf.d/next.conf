server {
    listen 80 default_server; # 监听 IPv4 的 80 端口
    listen [::]:80; # 监听 IPv6 的 80 端口 (可选)

    # 替换为你的服务器 IP 地址或域名（如果你有的话）
    # 如果你只想通过 IP 访问，可以省略 server_name 或使用 _ (通配符)
    # server_name your_server_ip_address; # 例如 server_name 47.93.3.11;
    server_name swiftbuild.tech www.swiftbuild.tech; # 或者使用下划线作为默认服务器块

    # 访问日志和错误日志 (可选，但推荐)
    access_log /var/log/nginx/my_next_app.access.log;
    error_log /var/log/nginx/my_next_app.error.log;

    location / {
        # 代理请求到你的 Next.js 应用
        # 将 127.0.0.1:3000 替换为你的 Next.js 应用实际监听的地址和端口
        proxy_pass http://127.0.0.1:3000;

        # 设置必要的代理头部，以便 Next.js 应用能正确获取客户端信息
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;

        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
    }

    # 对于 Next.js 的静态资源 (通常在 .next/static 和 public 目录下)
    # Nginx 可以直接提供服务以提高性能，而不是每次都代理到 Node.js
    # 这个路径需要与你部署的 Next.js 应用的目录结构对应

    # 如果你的 .next/static 和 public 文件夹在 Nginx 配置的 root 之外
    # （例如，当 Next.js 应用和 Nginx 不在同一个文件系统层级，
    # 或者你想更明确地控制静态文件服务），你可以使用 alias。

    # 假设你的应用部署在 /var/www/webapp/web/
    # .next/static 的文件通过 /_next/static/ 访问
    location /_next/static/ {
        alias /var/www/webapp/web/.next/static/; # 确保路径末尾有斜杠
        expires 365d; # 静态文件缓存一年
        access_log off; # 可选：关闭静态文件访问日志
    }

    # public 目录下的文件直接通过根路径访问
    # 如果 public 目录下的文件与 Next.js 的动态路由冲突，Next.js 的路由会优先
    # 通常 Next.js 会处理好 public 文件的服务，所以这里的配置块
    # 主要用于明确指定缓存策略或直接由 Nginx 服务（如果适用）
    # 但很多情况下，让 Next.js 处理 /public 目录下的文件服务也可以
    # location / {
    #     root /var/www/webapp/web/public; # 如果想让 Nginx 直接服务 public
    #     try_files $uri $uri/ @nextjs; # 如果文件不存在，则交给 Next.js 处理
    # }
    # @nextjs {
    #     proxy_pass http://127.0.0.1:3000;
    #     # ... 其他 proxy_set_header 指令 ...
    # }
    #
    # 对于大多数 output: 'standalone' 的 Next.js 应用，
    # 让 proxy_pass http://127.0.0.1:3000; 处理所有请求通常是最简单且有效的，
    # Next.js 内部会处理静态资源的服务。
    # 上面的 /_next/static/ location 块是一个常见的优化，
    # 因为 Nginx 服务静态文件通常比 Node.js 更高效。

    # 处理 WebSocket 连接 (如果你的 Next.js 应用使用 WebSocket)
    # location /socket.io/ { # 假设 WebSocket 路径是 /socket.io/
    #     proxy_pass http://127.0.0.1:3000;
    #     proxy_http_version 1.1;
    #     proxy_set_header Upgrade $http_upgrade;
    #     proxy_set_header Connection "upgrade";
    #     proxy_set_header Host $host;
    # }
}